pipeline {
    agent any
    environment {
        def RIOT_API_KEY = credentials('RIOT_API_KEY')
        def sonarAuthToken = credentials('sonar_key');
    }
    stages {
        stage('Build') {
            steps {
                script {
                    env.RIOT_API_KEY = RIOT_API_KEY

                    sh 'cd ./Application && docker build ./App -t img-app --build-arg RIOT_API_KEY="$RIOT_API_KEY"'
                }
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker run -dp 4200:4200 img-app'
            }
        }
    

        stage('SBOM') {
            steps {
                sh 'syft img-app >> sbom.txt'
            }
        }

        stage ('OWASP Dependency-Check Vulnerabilities') {
            steps {
                dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'owaspdpcheck'
            }
        }  

        stage('Snyk Scan') {
            steps {
                script {
                    def snykCommand = """snyk test --all-projects > snyk-output.txt"""
                    def snykScanResult = sh(script: snykCommand, returnStatus: true)

                    def snykOutputCommand = """snyk test --all-projects | tee -a snyk-output.txt"""

                    def snykOutputResult = sh(script: snykOutputCommand, returnStatus: true)

                    if (snykScanResult != 0) {
                        currentBuild.result = 'FAILURE'
                        error("Snyk scan failed")
                    }
                }
            }
        }
        
        stage('GitGuardian Scan') {
            agent {
                any { image 'gitguardian/ggshield:latest' }
            }
            environment {
                GITGUARDIAN_API_KEY = credentials('gitguardian-api-key')
            }
            steps {    
                sh '/var/lib/jenkins/.local/bin/ggshield secret scan ci >> secrets_check.txt'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool name: "sonarscanner", type: 'hudson.plugins.sonar.SonarRunnerInstallation';

                    sh """${scannerHome}/bin/sonar-scanner -Dsonar.login=${sonarAuthToken}""" 
                }
            }
        }

        stage('Selenium') {
            steps {
                script {
                    sh 'docker run -d -p 4444:4444 -v /dev/shm:/dev/shm selenium/standalone-chrome && python3 /home/sel.py'
                }
            }
        }
    }
}