pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'cd ./Application && docker build ./App -t img-app && docker compose build'
            }
        }
        stage('Deploy') {
            steps {
                sh 'cd ./Application && docker compose down && docker container prune && docker compose up -d'
            }
        }

        /*stage('SBOM') {
            steps {
                sh 'syft img-app >> sbom.txt'
            }
        }

        stage ('OWASP Dependency-Check Vulnerabilities') {
            steps {
                dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'owaspdpcheck'
            }
        }  */

        stage('Snyk Scan') {
            steps {
                script {
                    def snykCommand = """snyk test --all-projects > snyk-output.txt"""
                    def snykScanResult = sh(script: snykCommand, returnStatus: true)

                    def snykOutputCommand = """snyk test --all-projects | tee -a snyk-output.txt"""

                    def snykOutputResult = sh(script: snykOutputCommand, returnStatus: true)

                    if (snykScanResult != 0) {
                        currentBuild.result = 'FAILURE'
                        error("Snyk scan failed")
                    }
                }
            }
        }
        
        stage('GitGuardian Scan') {
            agent {
                any { image 'gitguardian/ggshield:latest' }
            }
            environment {
                GITGUARDIAN_API_KEY = credentials('gitguardian-api-key')
            }
            steps {
                sh 'pipx install ggshield && pipx ensurepath'
                sh '/var/lib/jenkins/.local/bin/ggshield secret scan ci >> secrets_check.txt'
            }
        }
    }
}
